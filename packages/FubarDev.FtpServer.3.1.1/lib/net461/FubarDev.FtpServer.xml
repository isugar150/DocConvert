<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FubarDev.FtpServer</name>
    </assembly>
    <members>
        <member name="T:FubarDev.FtpServer.Authentication.DefaultSslStreamWrapperFactory">
            <summary>
            The default implementation of the <see cref="T:FubarDev.FtpServer.Authentication.ISslStreamWrapperFactory"/> interface.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.DefaultSslStreamWrapperFactory.#ctor(Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.Authentication.DefaultSslStreamWrapperFactory})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.Authentication.DefaultSslStreamWrapperFactory"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.DefaultSslStreamWrapperFactory.WrapStreamAsync(System.IO.Stream,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.DefaultSslStreamWrapperFactory.CloseStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.DefaultSslStreamWrapperFactory.CreateSslStream(System.IO.Stream,System.Boolean)">
            <summary>
            Create a new <see cref="T:System.Net.Security.SslStream"/> instance.
            </summary>
            <param name="unencryptedStream">The stream to wrap in an <see cref="T:System.Net.Security.SslStream"/> instance.</param>
            <param name="keepOpen">Keep the inner stream open.</param>
            <returns>The new <see cref="T:System.Net.Security.SslStream"/>.</returns>
        </member>
        <member name="T:FubarDev.FtpServer.Authentication.TlsAuthenticationMechanism">
            <summary>
            Implementation for the <c>AUTH TLS</c> command.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.TlsAuthenticationMechanism.#ctor(FubarDev.FtpServer.IFtpConnection,FubarDev.FtpServer.Authentication.ISslStreamWrapperFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.Authentication.TlsAuthenticationMechanism"/> class.
            </summary>
            <param name="connection">The required FTP connection.</param>
            <param name="sslStreamWrapperFactory">The SslStream wrapper factory.</param>
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.TlsAuthenticationMechanism.CreateAuthTlsFeatureString(FubarDev.FtpServer.IFtpConnection)">
            <summary>
            Build a string to be returned by the <c>FEAT</c> command handler.
            </summary>
            <param name="connection">The FTP connection.</param>
            <returns>The string(s) to be returned.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.TlsAuthenticationMechanism.Reset">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.TlsAuthenticationMechanism.CanHandle(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.TlsAuthenticationMechanism.HandleAuthAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.TlsAuthenticationMechanism.HandleAdatAsync(System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.TlsAuthenticationMechanism.HandlePbszAsync(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.TlsAuthenticationMechanism.HandleProtAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Authentication.TlsAuthenticationMechanism.GetSupportedFeatures(FubarDev.FtpServer.IFtpConnection)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.AuthTlsOptions">
            <summary>
            Options for SSL/TLS connections.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.AuthTlsOptions.ServerCertificate">
            <summary>
            Gets or sets the server certificate.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.AuthTlsOptions.ImplicitFtps">
            <summary>
            Gets or sets a value indicating whether implicit FTPS is used.
            </summary>
        </member>
        <member name="T:FubarDev.FtpServer.BackgroundTransfer.BackgroundCommandHandler">
            <summary>
            Asynchronous processing of an FTP command.
            </summary>
            <remarks>
            This allows the implementation of the <c>ABOR</c> command.
            </remarks>
        </member>
        <member name="M:FubarDev.FtpServer.BackgroundTransfer.BackgroundCommandHandler.Execute(FubarDev.FtpServer.IFtpCommandBase,FubarDev.FtpServer.FtpCommand)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.BackgroundTransfer.BackgroundCommandHandler.Cancel">
            <summary>
            Cancels the processing of the current command.
            </summary>
            <returns><code>true</code> when there was a command execution that could be cancelled.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.BackgroundTransfer.BackgroundCommandHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:FubarDev.FtpServer.BackgroundTransfer.BackgroundTransferWorker.EnqueueAsync(FubarDev.FtpServer.BackgroundTransfer.IBackgroundTransfer,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.BackgroundTransfer.BackgroundTransferWorker.GetStates">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.CommandExtensions.AssemblyFtpCommandHandlerExtensionScanner">
            <summary>
            Scans the given assemblies for FTP command handlers.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.CommandExtensions.AssemblyFtpCommandHandlerExtensionScanner.#ctor(FubarDev.FtpServer.Commands.IFtpCommandHandlerProvider,Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.CommandExtensions.AssemblyFtpCommandHandlerExtensionScanner},System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.CommandExtensions.AssemblyFtpCommandHandlerExtensionScanner"/> class.
            </summary>
            <param name="commandHandlerProvider">The provider for the FTP commands.</param>
            <param name="logger">The logger.</param>
            <param name="assemblies">The assemblies to scan for FTP command handlers.</param>
        </member>
        <member name="M:FubarDev.FtpServer.CommandExtensions.AssemblyFtpCommandHandlerExtensionScanner.Search">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.CommandExtensions.DefaultFtpCommandHandlerExtensionProvider">
            <summary>
            Default implementation of <see cref="T:FubarDev.FtpServer.CommandExtensions.IFtpCommandHandlerExtensionProvider"/>.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.CommandExtensions.DefaultFtpCommandHandlerExtensionProvider.#ctor(System.Collections.Generic.IEnumerable{FubarDev.FtpServer.CommandExtensions.IFtpCommandHandlerExtensionScanner},Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.CommandExtensions.DefaultFtpCommandHandlerExtensionProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.CommandExtensions.DefaultFtpCommandHandlerExtensionProvider"/> class.
            </summary>
            <param name="scanners">The scanners to search for FTP command handlers.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.DefaultFtpCommandHandlerExtensionProvider.CommandHandlerExtensions">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtensionTypeExtensions.CommandHandlerExtensionInformation.Name">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtensionTypeExtensions.CommandHandlerExtensionInformation.IsLoginRequired">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtensionTypeExtensions.CommandHandlerExtensionInformation.IsAbortable">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtensionTypeExtensions.CommandHandlerExtensionInformation.Type">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtensionTypeExtensions.CommandHandlerExtensionInformation.ExtensionOf">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtensionTypeExtensions.CommandHandlerExtensionInstanceInformation.Name">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtensionTypeExtensions.CommandHandlerExtensionInstanceInformation.IsLoginRequired">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtensionTypeExtensions.CommandHandlerExtensionInstanceInformation.IsAbortable">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtensionTypeExtensions.CommandHandlerExtensionInstanceInformation.Type">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtensionTypeExtensions.CommandHandlerExtensionInstanceInformation.ExtensionOf">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.FtpCommandHandlerExtensionTypeExtensions.CommandHandlerExtensionInstanceInformation.Instance">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.CommandExtensions.IFtpCommandHandlerExtensionInstanceInformation">
            <summary>
            Interface to get the instance for a command handler extension created through dependency injection.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.CommandExtensions.IFtpCommandHandlerExtensionInstanceInformation.Instance">
            <summary>
            Gets the FTP command handler extension instance.
            </summary>
        </member>
        <member name="T:FubarDev.FtpServer.CommandExtensions.ServiceFtpCommandHandlerExtensionScanner">
            <summary>
            Uses DI to get the FTP command handlers.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.CommandExtensions.ServiceFtpCommandHandlerExtensionScanner.#ctor(FubarDev.FtpServer.Commands.IFtpCommandHandlerProvider,System.Collections.Generic.IEnumerable{FubarDev.FtpServer.IFtpCommandHandlerExtension},Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.Commands.ServiceFtpCommandHandlerScanner})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.CommandExtensions.ServiceFtpCommandHandlerExtensionScanner"/> class.
            </summary>
            <param name="commandHandlerProvider">The FTP command handler provider.</param>
            <param name="commandHandlerExtensions">The FTP command handler extensions.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FubarDev.FtpServer.CommandExtensions.ServiceFtpCommandHandlerExtensionScanner.Search">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.Commands.AssemblyFtpCommandHandlerScanner">
            <summary>
            Scans the given assemblies for FTP command handlers.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.Commands.AssemblyFtpCommandHandlerScanner.#ctor(System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.Commands.AssemblyFtpCommandHandlerScanner"/> class.
            </summary>
            <param name="assemblies">The assemblies to scan for FTP command handlers.</param>
        </member>
        <member name="M:FubarDev.FtpServer.Commands.AssemblyFtpCommandHandlerScanner.Search">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.Commands.DefaultFtpCommandActivator">
            <summary>
            Default implementation of the <see cref="T:FubarDev.FtpServer.Commands.IFtpCommandActivator"/>.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.Commands.DefaultFtpCommandActivator.#ctor(System.IServiceProvider,FubarDev.FtpServer.Commands.IFtpCommandHandlerProvider,FubarDev.FtpServer.CommandExtensions.IFtpCommandHandlerExtensionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.Commands.DefaultFtpCommandActivator"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="commandHandlerProvider">The provider for FTP command handlers.</param>
            <param name="commandHandlerExtensionProvider">The provider for FTP command handler extensions.</param>
        </member>
        <member name="M:FubarDev.FtpServer.Commands.DefaultFtpCommandActivator.Create(FubarDev.FtpServer.FtpCommandHandlerContext)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.Commands.DefaultFtpCommandHandlerProvider">
            <summary>
            Default implementation of <see cref="T:FubarDev.FtpServer.Commands.IFtpCommandHandlerProvider"/>.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.Commands.DefaultFtpCommandHandlerProvider.#ctor(System.Collections.Generic.IEnumerable{FubarDev.FtpServer.Commands.IFtpCommandHandlerScanner},Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.Commands.DefaultFtpCommandHandlerProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.Commands.DefaultFtpCommandHandlerProvider"/> class.
            </summary>
            <param name="scanners">The scanners to search for FTP command handlers.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:FubarDev.FtpServer.Commands.DefaultFtpCommandHandlerProvider.CommandHandlers">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Commands.FtpCommandHandlerTypeExtensions.CommandHandlerInformation.Name">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Commands.FtpCommandHandlerTypeExtensions.CommandHandlerInformation.IsLoginRequired">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Commands.FtpCommandHandlerTypeExtensions.CommandHandlerInformation.IsAbortable">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Commands.FtpCommandHandlerTypeExtensions.CommandHandlerInformation.Type">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Commands.FtpCommandHandlerTypeExtensions.CommandHandlerInformation.IsExtensible">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Commands.FtpCommandHandlerTypeExtensions.CommandHandlerInstanceInformation.Name">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Commands.FtpCommandHandlerTypeExtensions.CommandHandlerInstanceInformation.IsLoginRequired">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Commands.FtpCommandHandlerTypeExtensions.CommandHandlerInstanceInformation.IsAbortable">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Commands.FtpCommandHandlerTypeExtensions.CommandHandlerInstanceInformation.Type">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Commands.FtpCommandHandlerTypeExtensions.CommandHandlerInstanceInformation.IsExtensible">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Commands.FtpCommandHandlerTypeExtensions.CommandHandlerInstanceInformation.Instance">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.Commands.ServiceFtpCommandHandlerScanner">
            <summary>
            Uses DI to get the FTP command handlers.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.Commands.ServiceFtpCommandHandlerScanner.#ctor(System.Collections.Generic.IEnumerable{FubarDev.FtpServer.IFtpCommandHandler},Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.Commands.ServiceFtpCommandHandlerScanner})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.Commands.ServiceFtpCommandHandlerScanner"/> class.
            </summary>
            <param name="commandHandlers">The FTP command handlers.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FubarDev.FtpServer.Commands.ServiceFtpCommandHandlerScanner.Search">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.ConnectionHandlers.IFtpConnectionAdapter">
            <summary>
            An FTP connection adapter does something with the input and output pipes.
            </summary>
            <remarks>
            It uses a sender and a receiver service to be able to start/stop the tasks.
            </remarks>
        </member>
        <member name="P:FubarDev.FtpServer.ConnectionHandlers.IFtpConnectionAdapter.Sender">
            <summary>
            Gets the sender for this connection adapter.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.ConnectionHandlers.IFtpConnectionAdapter.Receiver">
            <summary>
            Gets the pausable receiver for this connection adapter.
            </summary>
        </member>
        <member name="T:FubarDev.FtpServer.ConnectionHandlers.IFtpSecureConnectionAdapter">
            <summary>
            Connection adapter for a secure connection.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.IFtpSecureConnectionAdapter.ResetAsync(System.Threading.CancellationToken)">
            <summary>
            Resets the connection to non-encrypted communication.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.IFtpSecureConnectionAdapter.EnableSslStreamAsync(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Threading.CancellationToken)">
            <summary>
            Enables encryption with an <see cref="T:System.Net.Security.SslStream"/>.
            </summary>
            <param name="certificate">The server certificate (with private key).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:FubarDev.FtpServer.ConnectionHandlers.PassThroughConnectionAdapter">
            <summary>
            Connection adapter that passes data from one pipe to another.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.PassThroughConnectionAdapter.#ctor(System.IO.Pipelines.IDuplexPipe,System.IO.Pipelines.IDuplexPipe,System.Threading.CancellationToken,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.ConnectionHandlers.PassThroughConnectionAdapter"/> class.
            </summary>
            <param name="socketPipe">The pipe for the socket.</param>
            <param name="connectionPipe">The pipe for the <see cref="T:FubarDev.FtpServer.IFtpConnection"/>.</param>
            <param name="connectionClosed">A cancellation token for a closed connection.</param>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="P:FubarDev.FtpServer.ConnectionHandlers.PassThroughConnectionAdapter.Sender">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.ConnectionHandlers.PassThroughConnectionAdapter.Receiver">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.PassThroughConnectionAdapter.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.PassThroughConnectionAdapter.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.PassThroughConnectionAdapter.NonClosingNetworkPassThrough.OnCloseAsync(System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.ConnectionHandlers.SecureConnectionAdapter">
            <summary>
            A connection adapter that allows enabling and resetting of an SSL/TLS connection.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.SecureConnectionAdapter.#ctor(System.IO.Pipelines.IDuplexPipe,System.IO.Pipelines.IDuplexPipe,FubarDev.FtpServer.Authentication.ISslStreamWrapperFactory,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.ConnectionHandlers.SecureConnectionAdapter"/> class.
            </summary>
            <param name="socketPipe">The pipe from the socket.</param>
            <param name="connectionPipe">The pipe to the connection object.</param>
            <param name="sslStreamWrapperFactory">The SSL stream wrapper factory.</param>
            <param name="connectionClosed">The cancellation token for a closed connection.</param>
        </member>
        <member name="P:FubarDev.FtpServer.ConnectionHandlers.SecureConnectionAdapter.Sender">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.ConnectionHandlers.SecureConnectionAdapter.Receiver">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.SecureConnectionAdapter.ResetAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.SecureConnectionAdapter.EnableSslStreamAsync(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.SecureConnectionAdapter.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.SecureConnectionAdapter.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.ConnectionHandlers.SslStreamConnectionAdapter">
            <summary>
            A connection adapter that injects an SSL stream between the socket and the connection pipe.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.ConnectionHandlers.SslStreamConnectionAdapter.Sender">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.ConnectionHandlers.SslStreamConnectionAdapter.Receiver">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.SslStreamConnectionAdapter.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.SslStreamConnectionAdapter.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.SslStreamConnectionAdapter.NonClosingNetworkStreamReader.OnPauseRequestedAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.SslStreamConnectionAdapter.NonClosingNetworkStreamReader.OnCloseAsync(System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.SslStreamConnectionAdapter.NonClosingNetworkStreamWriter.OnCloseAsync(System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ConnectionHandlers.SslStreamConnectionAdapter.NonClosingNetworkStreamWriter.WriteToStreamAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Features.Impl.NetworkStreamFeature.SecureConnectionAdapter">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Features.Impl.NetworkStreamFeature.Output">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.Features.INetworkStreamFeature">
            <summary>
            Features two services for reading from and writing to the network stream.
            </summary>
            <remarks>
            The main purpose for this services is the ability to pause and resume
            reading/writing from/to the stream to be able to enable TLS on demand.
            </remarks>
        </member>
        <member name="P:FubarDev.FtpServer.Features.INetworkStreamFeature.SecureConnectionAdapter">
            <summary>
            Gets the connection adapter that encrypts the network stream with an <c>SslStream</c> or something similar.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.Features.INetworkStreamFeature.Output">
            <summary>
            Gets the pipe writer for sending the responses.
            </summary>
        </member>
        <member name="T:FubarDev.FtpServer.FtpCommandCollector">
            <summary>
            Collects FTP commands using the current <see cref="T:System.Text.Encoding"/>.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.FtpCommandCollector.#ctor(System.Func{System.Text.Encoding})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.FtpCommandCollector"/> class.
            </summary>
            <param name="getActiveEncodingFunc">The delegate to get the current encoding for.</param>
        </member>
        <member name="P:FubarDev.FtpServer.FtpCommandCollector.Encoding">
            <summary>
            Gets the currently active <see cref="T:System.Text.Encoding"/>.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.FtpCommandCollector.IsEmpty">
            <summary>
            Gets a value indicating whether this collector contains unused data.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.FtpCommandCollector.Collect(System.ReadOnlySpan{System.Byte})">
            <summary>
            Collects the data from the <paramref name="buffer"/> and tries to build <see cref="T:FubarDev.FtpServer.FtpCommand"/> objects from it.
            </summary>
            <param name="buffer">The buffer to collect the data from.</param>
            <returns>The found <see cref="T:FubarDev.FtpServer.FtpCommand"/>s.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.FtpCommandCollector.FtpTelnetInputParser.InterruptProcess">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.FtpConnection">
            <summary>
            This class represents a FTP connection.
            </summary>
        </member>
        <member name="F:FubarDev.FtpServer.FtpConnection._streamReaderService">
            <summary>
            Gets the stream reader service.
            </summary>
            <remarks>
            It writes data from the network stream into a pipe.
            </remarks>
        </member>
        <member name="F:FubarDev.FtpServer.FtpConnection._streamWriterService">
            <summary>
            Gets the stream writer service.
            </summary>
            <remarks>
            It reads data from the pipe and writes it to the network stream.
            </remarks>
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.#ctor(FubarDev.FtpServer.TcpSocketClientAccessor,Microsoft.Extensions.Options.IOptions{FubarDev.FtpServer.FtpConnectionOptions},Microsoft.Extensions.Options.IOptions{FubarDev.FtpServer.PortCommandOptions},FubarDev.FtpServer.IFtpConnectionAccessor,FubarDev.FtpServer.Localization.IFtpCatalogLoader,FubarDev.FtpServer.ServerCommands.IServerCommandExecutor,System.IServiceProvider,FubarDev.FtpServer.DataConnection.SecureDataConnectionWrapper,FubarDev.FtpServer.Authentication.ISslStreamWrapperFactory,Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.FtpConnection},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.FtpConnection"/> class.
            </summary>
            <param name="socketAccessor">The accessor to get the socket used to communicate with the client.</param>
            <param name="options">The options for the FTP connection.</param>
            <param name="portOptions">The <c>PORT</c> command options.</param>
            <param name="connectionAccessor">The accessor to get the connection that is active during the <see cref="M:FubarDev.FtpServer.CommandHandlers.FtpCommandHandler.Process(FubarDev.FtpServer.FtpCommand,System.Threading.CancellationToken)"/> method execution.</param>
            <param name="catalogLoader">The catalog loader for the FTP server.</param>
            <param name="serverCommandExecutor">The executor for server commands.</param>
            <param name="serviceProvider">The service provider for the connection.</param>
            <param name="secureDataConnectionWrapper">Wraps a data connection into an SSL stream.</param>
            <param name="sslStreamWrapperFactory">The SSL stream wrapper factory.</param>
            <param name="logger">The logger for the FTP connection.</param>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="E:FubarDev.FtpServer.FtpConnection.Closed">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.ConnectionServices">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.ConnectionId">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.Features">
            <summary>
            Gets the feature collection.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.Encoding">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.Data">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.Log">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.LocalEndPoint">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.RemoteEndPoint">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.RemoteAddress">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.OriginalStream">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.SocketStream">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.IsSecure">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.FubarDev#FtpServer#IFtpConnection#CancellationToken">
            <summary>
            Gets the cancellation token to use to signal a task cancellation.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.WriteAsync(FubarDev.FtpServer.IFtpResponse,System.Threading.CancellationToken)">
            <summary>
            Writes a FTP response to a client.
            </summary>
            <param name="response">The response to write to the client.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.WriteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Writes response to a client.
            </summary>
            <param name="response">The response to write to the client.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.OpenDataConnectionAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.CreateEncryptedStream(System.IO.Stream)">
            <summary>
            Create an encrypted stream.
            </summary>
            <param name="unencryptedStream">The stream to encrypt.</param>
            <returns>The encrypted stream.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.SendResponsesAsync(System.Threading.Channels.ChannelReader{FubarDev.FtpServer.ServerCommands.IServerCommand},System.Threading.CancellationToken)">
            <summary>
            Send responses to the client.
            </summary>
            <param name="serverCommandReader">Reader for the responses.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.DispatchCommandAsync(FubarDev.FtpServer.FtpContext)">
            <summary>
            Final (default) dispatch from FTP commands to the handlers.
            </summary>
            <param name="context">The context for the FTP command execution.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.ConnectionClosingNetworkStreamReader.ReadFromStreamAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.ConnectionClosingNetworkStreamReader.OnCloseAsync(System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.ConnectionFeature.LocalEndPoint">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.ConnectionFeature.RemoteAddress">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.ConnectionFeature.RemoteEndPoint">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.SecureConnectionFeature.OriginalStream">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.SecureConnectionFeature.CreateEncryptedStream">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.SecureConnectionFeature.CloseEncryptedControlStream">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.DuplexPipe.Input">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.DuplexPipe.Output">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.DirectFtpResponse.Code">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnection.DirectFtpResponse.AfterWriteAction">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.DirectFtpResponse.GetNextLineAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnection.DirectFtpResponse.ToString">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.FtpConnectionAccessor">
            <summary>
            Accessor for the active FTP connection.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnectionAccessor.FtpConnection">
            <inheritdoc />
        </member>
        <member name="F:FubarDev.FtpServer.FtpConnectionKeepAlive._inactivityTimeoutLock">
            <summary>
            The lock to be acquired when the timeout information gets set or read.
            </summary>
        </member>
        <member name="F:FubarDev.FtpServer.FtpConnectionKeepAlive._inactivityTimeout">
            <summary>
            The timeout for the detection of inactivity.
            </summary>
        </member>
        <member name="F:FubarDev.FtpServer.FtpConnectionKeepAlive._utcLastActiveTime">
            <summary>
            The timestamp of the last activity on the connection.
            </summary>
        </member>
        <member name="F:FubarDev.FtpServer.FtpConnectionKeepAlive._expirationTimeout">
            <summary>
            The timestamp where the connection expires.
            </summary>
        </member>
        <member name="F:FubarDev.FtpServer.FtpConnectionKeepAlive._isInDataTransfer">
            <summary>
            Indicator if a data transfer is ongoing.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnectionKeepAlive.IsAlive">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnectionKeepAlive.LastActivityUtc">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnectionKeepAlive.IsInDataTransfer">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpConnectionKeepAlive.KeepAlive">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.FtpConnectionOptions">
            <summary>
            Options for the FTP connection.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnectionOptions.DefaultEncoding">
            <summary>
            Gets or sets the default connection encoding.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.FtpConnectionOptions.InactivityTimeout">
            <summary>
            Gets or sets the default connection inactivity timeout.
            </summary>
        </member>
        <member name="T:FubarDev.FtpServer.FtpLogExtensions">
            <summary>
            Extension methods for logging <see cref="T:FubarDev.FtpServer.FtpCommand"/> and <see cref="T:FubarDev.FtpServer.FtpResponse"/> objects.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.FtpLogExtensions.Command(Microsoft.Extensions.Logging.ILogger,FubarDev.FtpServer.FtpCommand)">
            <summary>
            Logs a trace message with the data of the <see cref="T:FubarDev.FtpServer.FtpCommand"/>.
            </summary>
            <param name="log">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use.</param>
            <param name="command">The <see cref="T:FubarDev.FtpServer.FtpCommand"/> to log.</param>
        </member>
        <member name="M:FubarDev.FtpServer.FtpLogExtensions.Trace(Microsoft.Extensions.Logging.ILogger,FubarDev.FtpServer.IFtpResponse)">
            <summary>
            Logs a trace message with the data of the <see cref="T:FubarDev.FtpServer.FtpResponse"/>.
            </summary>
            <param name="log">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use.</param>
            <param name="response">The <see cref="T:FubarDev.FtpServer.FtpResponse"/> to log.</param>
        </member>
        <member name="M:FubarDev.FtpServer.FtpLogExtensions.Debug(Microsoft.Extensions.Logging.ILogger,FubarDev.FtpServer.IFtpResponse)">
            <summary>
            Logs a debug message with the data of the <see cref="T:FubarDev.FtpServer.FtpResponse"/>.
            </summary>
            <param name="log">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use.</param>
            <param name="response">The <see cref="T:FubarDev.FtpServer.FtpResponse"/> to log.</param>
        </member>
        <member name="M:FubarDev.FtpServer.FtpLogExtensions.Info(Microsoft.Extensions.Logging.ILogger,FubarDev.FtpServer.IFtpResponse)">
            <summary>
            Logs a info message with the data of the <see cref="T:FubarDev.FtpServer.FtpResponse"/>.
            </summary>
            <param name="log">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use.</param>
            <param name="response">The <see cref="T:FubarDev.FtpServer.FtpResponse"/> to log.</param>
        </member>
        <member name="M:FubarDev.FtpServer.FtpLogExtensions.Warn(Microsoft.Extensions.Logging.ILogger,FubarDev.FtpServer.IFtpResponse)">
            <summary>
            Logs a warning message with the data of the <see cref="T:FubarDev.FtpServer.FtpResponse"/>.
            </summary>
            <param name="log">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use.</param>
            <param name="response">The <see cref="T:FubarDev.FtpServer.FtpResponse"/> to log.</param>
        </member>
        <member name="M:FubarDev.FtpServer.FtpLogExtensions.Error(Microsoft.Extensions.Logging.ILogger,FubarDev.FtpServer.IFtpResponse)">
            <summary>
            Logs an error message with the data of the <see cref="T:FubarDev.FtpServer.FtpResponse"/>.
            </summary>
            <param name="log">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use.</param>
            <param name="response">The <see cref="T:FubarDev.FtpServer.FtpResponse"/> to log.</param>
        </member>
        <member name="M:FubarDev.FtpServer.FtpLogExtensions.Log(Microsoft.Extensions.Logging.ILogger,FubarDev.FtpServer.IFtpResponse)">
            <summary>
            Logs a message with the data of the <see cref="T:FubarDev.FtpServer.FtpResponse"/>.
            </summary>
            <param name="log">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use.</param>
            <param name="response">The <see cref="T:FubarDev.FtpServer.FtpResponse"/> to log.</param>
            <remarks>
            It logs either a trace, debug, or warning message depending on the
            <see cref="P:FubarDev.FtpServer.FtpResponse.Code"/>.
            </remarks>
        </member>
        <member name="T:FubarDev.FtpServer.FtpServer">
            <summary>
            The portable FTP server.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.FtpServer.#ctor(Microsoft.Extensions.Options.IOptions{FubarDev.FtpServer.FtpServerOptions},System.IServiceProvider,System.Collections.Generic.IEnumerable{FubarDev.FtpServer.IFtpControlStreamAdapter},Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.FtpServer})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.FtpServer"/> class.
            </summary>
            <param name="serverOptions">The server options.</param>
            <param name="serviceProvider">The service provider used to query services.</param>
            <param name="controlStreamAdapters">Adapters for the control connection stream.</param>
            <param name="logger">The FTP server logger.</param>
        </member>
        <member name="E:FubarDev.FtpServer.FtpServer.ConfigureConnection">
            <inheritdoc />
        </member>
        <member name="E:FubarDev.FtpServer.FtpServer.ListenerStarted">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpServer.Statistics">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpServer.ServerAddress">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpServer.Port">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpServer.MaxActiveConnections">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpServer.Status">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpServer.Ready">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpServer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:FubarDev.FtpServer.FtpServer.GetConnections">
            <summary>
            Returns all connections.
            </summary>
            <returns>The currently active connections.</returns>
            <remarks>
            The connection might be closed between calling this function and
            using/querying the connection by the client.
            </remarks>
        </member>
        <member name="M:FubarDev.FtpServer.FtpServer.FubarDev#FtpServer#IFtpServer#Start">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpServer.FubarDev#FtpServer#IFtpServer#Stop">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpServer.PauseAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpServer.ContinueAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpServer.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpServer.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpServer.CloseExpiredConnections">
            <summary>
            Close expired FTP connections.
            </summary>
            <remarks>
            This will always happen when the FTP client is idle (without sending notifications) or
            when the client was disconnected due to an undetectable network error.
            </remarks>
        </member>
        <member name="T:FubarDev.FtpServer.FtpServerHost">
            <summary>
            Simple <see cref="T:FubarDev.FtpServer.IFtpServerHost"/> implementation.
            </summary>
            <remarks>
            This services is used to start and stop all <see cref="T:FubarDev.FtpServer.IFtpService"/> instances.
            </remarks>
        </member>
        <member name="M:FubarDev.FtpServer.FtpServerHost.#ctor(System.Collections.Generic.IEnumerable{FubarDev.FtpServer.IFtpService})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.FtpServerHost"/> class.
            </summary>
            <param name="ftpServices">The FTP services to start and stop.</param>
        </member>
        <member name="M:FubarDev.FtpServer.FtpServerHost.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.FtpServerHost.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.FtpServerOptions">
            <summary>
            The FTP server options.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.FtpServerOptions.ServerAddress">
            <summary>
            Gets or sets the address the server listens on.
            Leave empty to listen on all interfaces.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.FtpServerOptions.Port">
            <summary>
            Gets or sets the server port.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.FtpServerOptions.MaxActiveConnections">
            <summary>
            Gets or sets the max allows active connections.
            </summary>
            <remarks>
            This will cause connections to be refused if count is exceeded.
            0 (default) means no control over connection count.
            </remarks>
        </member>
        <member name="P:FubarDev.FtpServer.FtpServerOptions.ConnectionInactivityCheckInterval">
            <summary>
            Gets or sets the interval between checks for inactive connections.
            </summary>
        </member>
        <member name="T:FubarDev.FtpServer.FtpServerStatistics">
            <summary>
            Statistics about the FTP server.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.FtpServerStatistics.TotalConnections">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.FtpServerStatistics.ActiveConnections">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.IFtpServerHost">
            <summary>
            Interface for a simple FTP server host.
            </summary>
            <remarks>
            This services is used to start and stop all <see cref="T:FubarDev.FtpServer.IFtpService"/> instances.
            </remarks>
        </member>
        <member name="M:FubarDev.FtpServer.IFtpServerHost.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Must be called to start the FTP server host.
            </summary>
            <remarks>
            Starts all FTP server services.
            </remarks>
            <param name="cancellationToken">Indicates that the start process has been aborted.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.IFtpServerHost.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Must be called for a graceful shutdown of the FTP server host.
            </summary>
            <remarks>
            Stops all FTP server services.
            </remarks>
            <param name="cancellationToken">Indicates that the shutdown process should no longer be graceful.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:FubarDev.FtpServer.Localization.DefaultFtpCatalogLoader">
            <summary>
            The default implementation of the <see cref="T:FubarDev.FtpServer.Localization.IFtpCatalogLoader"/>.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.Localization.DefaultFtpCatalogLoader.DefaultCatalog">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Localization.DefaultFtpCatalogLoader.DefaultLanguage">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Localization.DefaultFtpCatalogLoader.GetSupportedLanguages">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Localization.DefaultFtpCatalogLoader.LoadAsync(System.Globalization.CultureInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.MultiBindingTcpListener">
            <summary>
            Allows binding to a host name, which in turn may resolve to multiple IP addresses.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.MultiBindingTcpListener.#ctor(System.String,System.Int32,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.MultiBindingTcpListener"/> class.
            </summary>
            <param name="address">The address/host name to bind to.</param>
            <param name="port">The listener port.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:FubarDev.FtpServer.MultiBindingTcpListener.Port">
            <summary>
            Gets the port this listener is bound to.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.MultiBindingTcpListener.StartAsync">
            <summary>
            Start all listeners.
            </summary>
            <returns>the task.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.MultiBindingTcpListener.Stop">
            <summary>
            Stops all listeners.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.MultiBindingTcpListener.WaitAnyTcpClientAsync(System.Threading.CancellationToken)">
            <summary>
            Wait for any client on all listeners.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>The new TCP client.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.MultiBindingTcpListener.StartAccepting">
            <summary>
            Start the asynchronous acception for all listeners.
            </summary>
        </member>
        <member name="T:FubarDev.FtpServer.Networking.FtpServerListenerService">
            <summary>
            Listener for the server.
            </summary>
            <remarks>
            Accepting connections can be paused.
            </remarks>
        </member>
        <member name="M:FubarDev.FtpServer.Networking.FtpServerListenerService.#ctor(System.Threading.Channels.ChannelWriter{System.Net.Sockets.TcpClient},Microsoft.Extensions.Options.IOptions{FubarDev.FtpServer.FtpServerOptions},System.Threading.CancellationTokenSource,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.Networking.FtpServerListenerService"/> class.
            </summary>
            <param name="newClientWriter">Channel that receives all accepted clients.</param>
            <param name="serverOptions">The server options.</param>
            <param name="logger">The logger.</param>
            <param name="connectionClosedCts">Cancellation token source for a closed connection.</param>
        </member>
        <member name="E:FubarDev.FtpServer.Networking.FtpServerListenerService.ListenerStarted">
            <summary>
            Event for a started listener.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.Networking.FtpServerListenerService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.FtpServerListenerService.OnFailedAsync(System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.FtpServerListenerService.OnStoppedAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PassThroughService.#ctor(System.IO.Pipelines.PipeReader,System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.Networking.PassThroughService"/> class.
            </summary>
            <param name="reader">The reader to read from.</param>
            <param name="writer">The writer to write to.</param>
            <param name="connectionClosed">Cancellation token for a closed connection.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PassThroughService.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PassThroughService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PassThroughService.OnStopRequestedAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PassThroughService.OnPauseRequestedAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PassThroughService.OnFailedAsync(System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PassThroughService.OnPausedAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PassThroughService.OnStoppedAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.Networking.PausableFtpService">
            <summary>
            Base class for communication services.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PausableFtpService.#ctor(System.Threading.CancellationToken,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.Networking.PausableFtpService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="connectionClosed">Cancellation token source for a closed connection.</param>
        </member>
        <member name="P:FubarDev.FtpServer.Networking.PausableFtpService.Status">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PausableFtpService.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PausableFtpService.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PausableFtpService.PauseAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.PausableFtpService.ContinueAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.Networking.SimplePipeStream">
            <summary>
            A stream that uses a pipe.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.Networking.SimplePipeStream.#ctor(System.IO.Pipelines.PipeReader,System.IO.Pipelines.PipeWriter,Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.Networking.SimplePipeStream})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.Networking.SimplePipeStream"/> class.
            </summary>
            <param name="input">The pipe reader to be used to read from.</param>
            <param name="output">The pipe writer to be used to write to.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:FubarDev.FtpServer.Networking.SimplePipeStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Networking.SimplePipeStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Networking.SimplePipeStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Networking.SimplePipeStream.Length">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.Networking.SimplePipeStream.Position">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.SimplePipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.SimplePipeStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.SimplePipeStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.SimplePipeStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.SimplePipeStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.SimplePipeStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.SimplePipeStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.SimplePipeStream.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.Networking.StreamPipeReaderService">
            <summary>
            Reads from a stream and writes into a pipeline.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.Networking.StreamPipeReaderService.#ctor(System.IO.Stream,System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.Networking.StreamPipeReaderService"/> class.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="pipeWriter">The pipeline to write to.</param>
            <param name="connectionClosed">Cancellation token for a closed connection.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FubarDev.FtpServer.Networking.StreamPipeReaderService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.StreamPipeReaderService.OnStoppedAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.StreamPipeReaderService.OnFailedAsync(System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.Networking.StreamPipeWriterService">
            <summary>
            Reads from a pipe and writes to a stream.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.Networking.StreamPipeWriterService.#ctor(System.IO.Stream,System.IO.Pipelines.PipeReader,System.Threading.CancellationToken,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.Networking.StreamPipeWriterService"/> class.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="pipeReader">The pipe to read from.</param>
            <param name="connectionClosed">Cancellation token for a closed connection.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:FubarDev.FtpServer.Networking.StreamPipeWriterService.Stream">
            <summary>
            Gets the stream used to write the output.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.Networking.StreamPipeWriterService.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.StreamPipeWriterService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.StreamPipeWriterService.OnPausedAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.StreamPipeWriterService.OnFailedAsync(System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.Networking.StreamPipeWriterService.OnCloseAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>
            Called when the stream is closed.
            </summary>
            <param name="exception">The exception that occurred during the operation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.Networking.StreamPipeWriterService.WriteToStreamAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">The buffer containing the data.</param>
            <param name="offset">The offset into the buffer.</param>
            <param name="length">The length of the data to send.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:FubarDev.FtpServer.PasvListener">
            <summary>
            The default implementation of the <see cref="T:FubarDev.FtpServer.IPasvListener"/> interface.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.PasvListener.#ctor(System.Net.IPAddress,System.Int32,System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.PasvListener"/> class.
            </summary>
            <param name="listenAddress">On which address to listen.</param>
            <param name="port">Port to listen on, or 0 for any.</param>
            <param name="externalAddress">which external address should be advertised to clients. Use null to use the listener's address.</param>
            <exception cref="T:System.ArgumentNullException">listenAddress is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">port is out of range.</exception>
        </member>
        <member name="P:FubarDev.FtpServer.PasvListener.PasvEndPoint">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.PasvListener.AcceptPasvClientAsync">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.PasvListener.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.PasvListenerFactory">
            <summary>
            Creates TcpListeners for use with PASV commands.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.PasvListenerFactory.#ctor(FubarDev.FtpServer.IPasvAddressResolver,Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.PasvListenerFactory})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.PasvListenerFactory"/> class.
            </summary>
            <param name="addressResolver">The address resolver for <c>PASV</c>/<c>EPSV</c>.</param>
            <param name="logger">Logger instance.</param>
        </member>
        <member name="M:FubarDev.FtpServer.PasvListenerFactory.CreateTcpListenerAsync(FubarDev.FtpServer.IFtpConnection,System.Nullable{System.Net.Sockets.AddressFamily},System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.PasvListenerFactory.CreateListenerInRange(FubarDev.FtpServer.IFtpConnection,FubarDev.FtpServer.PasvListenerOptions)">
            <summary>
            Gets a listener on a port within the assigned port range.
            </summary>
            <param name="connection">Connection for which to create the listener.</param>
            <param name="pasvOptions">The options for the <see cref="T:FubarDev.FtpServer.IPasvListener"/>.</param>
            <returns>Configured PasvListener.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">When no free port could be found, or other bad things happen. See <see cref="T:System.Net.Sockets.SocketError"/>.</exception>
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommandHandlers.CloseConnectionServerCommandHandler">
            <summary>
            Handler for the <see cref="T:FubarDev.FtpServer.ServerCommands.CloseConnectionServerCommand"/>.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.CloseConnectionServerCommandHandler.#ctor(FubarDev.FtpServer.IFtpConnectionAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.ServerCommandHandlers.CloseConnectionServerCommandHandler"/> class.
            </summary>
            <param name="connectionAccessor">The FTP connection accessor.</param>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.CloseConnectionServerCommandHandler.ExecuteAsync(FubarDev.FtpServer.ServerCommands.CloseConnectionServerCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommandHandlers.CloseDataConnectionServerCommandHandler">
            <summary>
            Handler for the <see cref="T:FubarDev.FtpServer.ServerCommands.CloseDataConnectionServerCommand"/>.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.CloseDataConnectionServerCommandHandler.ExecuteAsync(FubarDev.FtpServer.ServerCommands.CloseDataConnectionServerCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommandHandlers.DataConnectionServerCommandHandler">
            <summary>
            Handler for the <see cref="T:FubarDev.FtpServer.ServerCommands.DataConnectionServerCommand"/>.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.DataConnectionServerCommandHandler.#ctor(FubarDev.FtpServer.IFtpConnectionAccessor,Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.ServerCommandHandlers.DataConnectionServerCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.ServerCommandHandlers.DataConnectionServerCommandHandler"/> class.
            </summary>
            <param name="connectionAccessor">The FTP connection accessor.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.DataConnectionServerCommandHandler.ExecuteAsync(FubarDev.FtpServer.ServerCommands.DataConnectionServerCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.DataConnectionServerCommandHandler.ConnectionKeepAlive.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommandHandlers.PauseConnectionServerCommandHandler">
            <summary>
            Handler for the <see cref="T:FubarDev.FtpServer.ServerCommands.PauseConnectionServerCommand"/>.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.PauseConnectionServerCommandHandler.#ctor(FubarDev.FtpServer.IFtpConnectionAccessor,Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.ServerCommandHandlers.PauseConnectionServerCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.ServerCommandHandlers.PauseConnectionServerCommandHandler"/> class.
            </summary>
            <param name="connectionAccessor">The FTP connection accessor.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.PauseConnectionServerCommandHandler.ExecuteAsync(FubarDev.FtpServer.ServerCommands.PauseConnectionServerCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommandHandlers.ResumeConnectionServerCommandHandler">
            <summary>
            Handler for the <see cref="T:FubarDev.FtpServer.ServerCommands.ResumeConnectionServerCommand"/>.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.ResumeConnectionServerCommandHandler.#ctor(FubarDev.FtpServer.IFtpConnectionAccessor,Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.ServerCommandHandlers.ResumeConnectionServerCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.ServerCommandHandlers.ResumeConnectionServerCommandHandler"/> class.
            </summary>
            <param name="connectionAccessor">The FTP connection accessor.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.ResumeConnectionServerCommandHandler.ExecuteAsync(FubarDev.FtpServer.ServerCommands.ResumeConnectionServerCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommandHandlers.SendResponseServerCommandHandler">
            <summary>
            Command handler for the <see cref="T:FubarDev.FtpServer.ServerCommands.SendResponseServerCommand"/>.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.SendResponseServerCommandHandler.#ctor(FubarDev.FtpServer.IFtpConnectionAccessor,Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.ServerCommandHandlers.SendResponseServerCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.ServerCommandHandlers.SendResponseServerCommandHandler"/> class.
            </summary>
            <param name="connectionAccessor">The FTP connection accessor.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.SendResponseServerCommandHandler.ExecuteAsync(FubarDev.FtpServer.ServerCommands.SendResponseServerCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommandHandlers.TlsEnableServerCommandHandler">
            <summary>
            Handler for the <see cref="T:FubarDev.FtpServer.ServerCommands.TlsEnableServerCommand"/>.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.TlsEnableServerCommandHandler.#ctor(FubarDev.FtpServer.IFtpConnectionAccessor,Microsoft.Extensions.Options.IOptions{FubarDev.FtpServer.AuthTlsOptions},Microsoft.Extensions.Logging.ILogger{FubarDev.FtpServer.ServerCommandHandlers.TlsEnableServerCommandHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.ServerCommandHandlers.TlsEnableServerCommandHandler"/> class.
            </summary>
            <param name="connectionAccessor">The FTP connection accessor.</param>
            <param name="options">Options for the AUTH TLS command.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.TlsEnableServerCommandHandler.ExecuteAsync(FubarDev.FtpServer.ServerCommands.TlsEnableServerCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommandHandlers.TlsEnableServerCommandHandler.EnableTlsAsync(FubarDev.FtpServer.IFtpConnection,System.Security.Cryptography.X509Certificates.X509Certificate2,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <summary>
            Enables TLS on a connection that isn't reading or writing (read: that's not started yet or is paused).
            </summary>
            <param name="connection">The FTP connection to activate TLS for.</param>
            <param name="certificate">The X.509 certificate to use (with private key).</param>
            <param name="logger">The logger.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommands.DelegateServerCommandExecutor">
            <summary>
            This <see cref="T:FubarDev.FtpServer.ServerCommands.IServerCommandExecutor"/> implementation creates a compiled delegate to call the server command handlers.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommands.DelegateServerCommandExecutor.#ctor(FubarDev.FtpServer.IFtpConnectionAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.ServerCommands.DelegateServerCommandExecutor"/> class.
            </summary>
            <param name="ftpConnectionAccessor">Accessor to get the FTP connection.</param>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommands.DelegateServerCommandExecutor.ExecuteAsync(FubarDev.FtpServer.ServerCommands.IServerCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommands.IServerCommandExecutor">
            <summary>
            A server command executor.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommands.IServerCommandExecutor.ExecuteAsync(FubarDev.FtpServer.ServerCommands.IServerCommand,System.Threading.CancellationToken)">
            <summary>
            Execute the given server command.
            </summary>
            <param name="serverCommand">The server command to execute.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommands.PauseConnectionServerCommand">
            <summary>
            Pauses the connection (only RX).
            </summary>
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommands.ReflectionServerCommandExecutor">
            <summary>
            This <see cref="T:FubarDev.FtpServer.ServerCommands.IServerCommandExecutor"/> implementation calls the server command handler using reflection.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommands.ReflectionServerCommandExecutor.#ctor(FubarDev.FtpServer.IFtpConnectionAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.ServerCommands.ReflectionServerCommandExecutor"/> class.
            </summary>
            <param name="ftpConnectionAccessor">Accessor to get the FTP connection.</param>
        </member>
        <member name="M:FubarDev.FtpServer.ServerCommands.ReflectionServerCommandExecutor.ExecuteAsync(FubarDev.FtpServer.ServerCommands.IServerCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommands.ResumeConnectionServerCommand">
            <summary>
            Resumes the connection (only RX).
            </summary>
        </member>
        <member name="T:FubarDev.FtpServer.ServerCommands.TlsEnableServerCommand">
            <summary>
            Command to be sent to enable TLS for the control connection.
            </summary>
        </member>
        <member name="T:FubarDev.FtpServer.SimplePasvAddressResolver">
            <summary>
            The default implementation of the <see cref="T:FubarDev.FtpServer.SimplePasvAddressResolver"/>.
            </summary>
            <remarks>
            The address family number gets ignored by this resolver. We always use the same
            address family as the local end point.
            </remarks>
        </member>
        <member name="M:FubarDev.FtpServer.SimplePasvAddressResolver.#ctor(Microsoft.Extensions.Options.IOptions{FubarDev.FtpServer.SimplePasvOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.SimplePasvAddressResolver"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:FubarDev.FtpServer.SimplePasvAddressResolver.GetOptionsAsync(FubarDev.FtpServer.IFtpConnection,System.Nullable{System.Net.Sockets.AddressFamily},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.SimplePasvOptions">
            <summary>
            Options for the <see cref="T:FubarDev.FtpServer.SimplePasvAddressResolver"/>.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.SimplePasvOptions.PasvMinPort">
            <summary>
            Gets or sets minimum port number to use for passive ftp.
            </summary>
            <remarks>
            Only active if PasvMaxPort is set, too).
            If set, needs to be larger than 1023.
            </remarks>
        </member>
        <member name="P:FubarDev.FtpServer.SimplePasvOptions.PasvMaxPort">
            <summary>
            Gets or sets maximum port number to use for passive ftp.
            </summary>
            <remarks>
            If set, needs to be larger than PasvMinPort.
            </remarks>
        </member>
        <member name="P:FubarDev.FtpServer.SimplePasvOptions.PublicAddress">
            <summary>
            Gets or sets the address published to clients for PASV connections.
            </summary>
            <remarks>
            This may be necessary if you are behind a forwarding firewall, for example.
            </remarks>
        </member>
        <member name="T:FubarDev.FtpServer.SingleFtpHostSelector">
            <summary>
            A simple implementation of the <see cref="T:FubarDev.FtpServer.IFtpHostSelector"/> interface.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.SingleFtpHostSelector.#ctor(FubarDev.FtpServer.IFtpConnection,System.Collections.Generic.IEnumerable{FubarDev.FtpServer.Authentication.IAuthenticationMechanism},System.Collections.Generic.IEnumerable{FubarDev.FtpServer.Authorization.IAuthorizationMechanism},Microsoft.Extensions.Options.IOptions{FubarDev.FtpServer.AuthTlsOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:FubarDev.FtpServer.SingleFtpHostSelector"/> class.
            </summary>
            <param name="connection">The FTP connection.</param>
            <param name="authenticationMechanisms">The registered authentication mechanisms.</param>
            <param name="authorizationMechanisms">The registered authorization mechanisms.</param>
            <param name="authTlsOptions">The options for the AUTH TLS command.</param>
        </member>
        <member name="P:FubarDev.FtpServer.SingleFtpHostSelector.SelectedHost">
            <inheritdoc />
        </member>
        <member name="M:FubarDev.FtpServer.SingleFtpHostSelector.SelectHostAsync(FubarDev.FtpServer.HostInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.SingleFtpHostSelector.DefaultFtpHost.Info">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.SingleFtpHostSelector.DefaultFtpHost.Certificate">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.SingleFtpHostSelector.DefaultFtpHost.AuthenticationMechanisms">
            <inheritdoc />
        </member>
        <member name="P:FubarDev.FtpServer.SingleFtpHostSelector.DefaultFtpHost.AuthorizationMechanisms">
            <inheritdoc />
        </member>
        <member name="T:FubarDev.FtpServer.TcpSocketClientAccessor">
            <summary>
            Accessor to set/get the current <see cref="T:System.Net.Sockets.TcpClient"/>.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.TcpSocketClientAccessor.TcpSocketClient">
            <summary>
            Gets or sets the current <see cref="T:System.Net.Sockets.TcpClient"/>.
            </summary>
        </member>
        <member name="P:FubarDev.FtpServer.TcpSocketClientAccessor.TcpSocketStream">
            <summary>
            Gets or sets the <see cref="T:System.IO.Stream"/> to use.
            </summary>
        </member>
        <member name="T:FubarDev.FtpServer.TelnetInputParser`1">
            <summary>
            Filters the TELNET commands usually sent before an ABOR command.
            </summary>
            <typeparam name="T">The return type of a <see cref="M:FubarDev.FtpServer.TelnetInputParser`1.Collect(System.ReadOnlySpan{System.Byte})"/> operation.</typeparam>
        </member>
        <member name="M:FubarDev.FtpServer.TelnetInputParser`1.Collect(System.ReadOnlySpan{System.Byte})">
            <summary>
            Collects data and handles the <c>Synch</c> and <c>Interrupt Process</c> TELNET commands.
            </summary>
            <param name="data">The data buffer.</param>
            <returns>The list of items found inside the collected data.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.TelnetInputParser`1.DataReceived(System.ReadOnlySpan{System.Byte})">
            <summary>
            Collects all non-TELNET data.
            </summary>
            <param name="data">The data buffer.</param>
            <returns>The collected items.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.TelnetInputParser`1.Synch">
            <summary>
            Handles the <c>Synch</c> command.
            </summary>
            <returns>The collected items.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.TelnetInputParser`1.InterruptProcess">
            <summary>
            Handles the <c>Interrupt Process</c> command.
            </summary>
            <returns>The collected items.</returns>
        </member>
        <member name="T:FubarDev.FtpServer.ExceptionExtensions">
            <summary>
            Extension methods for exceptions.
            </summary>
        </member>
        <member name="M:FubarDev.FtpServer.ExceptionExtensions.Is``1(System.Exception)">
            <summary>
            Check if exception is of the given type.
            </summary>
            <typeparam name="TException">The exception type to check for.</typeparam>
            <param name="ex">The exception to check.</param>
            <returns><see langword="true"/> if the exception is of the given type.</returns>
        </member>
        <member name="M:FubarDev.FtpServer.ExceptionExtensions.Get``1(System.Exception)">
            <summary>
            Cast the exception to the given type.
            </summary>
            <typeparam name="TException">The target exception type.</typeparam>
            <param name="ex">The exception to cast.</param>
            <returns>The exception of the target exception type.</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddFtpServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{FubarDev.FtpServer.IFtpServerBuilder})">
            <summary>
            Adds the FTP server services to the collection.
            </summary>
            <param name="services">The service collection to add the FTP server services to.</param>
            <param name="configure">Configuration of the FTP server services.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.FtpServerBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.FtpServerBuilder"/> class.
            </summary>
            <param name="services">The service collection.</param>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.FtpServerBuilder.Services">
            <inheritdoc />
        </member>
        <member name="T:System.Net.Security.GnuSslStream">
            <summary>
            An SslStream implementation that gracefully terminates the SSL stream.
            </summary>
            <remarks>
            This implementation works only(!) on Windows and is used to fix a misbehaviour
            in combination with applications using GnuTLS.
            </remarks>
        </member>
        <member name="M:System.Net.Security.GnuSslStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Security.GnuSslStream"/> class.
            </summary>
            <param name="innerStream">The inner (network) stream.</param>
        </member>
        <member name="M:System.Net.Security.GnuSslStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Security.GnuSslStream"/> class.
            </summary>
            <param name="innerStream">The inner (network) stream.</param>
            <param name="leaveInnerStreamOpen">Leave the inner stream open.</param>
        </member>
        <member name="M:System.Net.Security.GnuSslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Security.GnuSslStream"/> class.
            </summary>
            <param name="innerStream">The inner (network) stream.</param>
            <param name="leaveInnerStreamOpen">Leave the inner stream open.</param>
            <param name="userCertificateValidationCallback">A callback allowing validation of user certificates.</param>
        </member>
        <member name="M:System.Net.Security.GnuSslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Security.GnuSslStream"/> class.
            </summary>
            <param name="innerStream">The inner (network) stream.</param>
            <param name="leaveInnerStreamOpen">Leave the inner stream open.</param>
            <param name="userCertificateValidationCallback">A callback allowing validation of user certificates.</param>
            <param name="userCertificateSelectionCallback">A callback for the user certificate selection.</param>
        </member>
        <member name="M:System.Net.Security.GnuSslStream.Close">
            <inheritdoc />
        </member>
    </members>
</doc>
