<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NGettext</name>
    </assembly>
    <members>
        <member name="T:NGettext.Catalog">
            <summary>
            Represents a Gettext catalog instance.
            </summary>
        </member>
        <member name="F:NGettext.Catalog.CONTEXT_GLUE">
            <summary>
            Context glue (&lt;EOT&gt; symbol)
            </summary>
        </member>
        <member name="P:NGettext.Catalog.CultureInfo">
            <summary>
            Current catalog locale.
            </summary>
        </member>
        <member name="P:NGettext.Catalog.Translations">
            <summary>
            Loaded raw translation strings.
            (msgctxt&lt;EOT&gt;)msgid => msgstr[]
            </summary>
        </member>
        <member name="P:NGettext.Catalog.PluralRule">
            <summary>
            Gets or sets current plural form rule.
            </summary>
        </member>
        <member name="M:NGettext.Catalog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Catalog"/> class that has no translations
            using the current UI culture info and plural rule generated by DefaultPluralRuleGenerator for the current UI culture.
            </summary>
        </member>
        <member name="M:NGettext.Catalog.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Catalog"/> class that has no translations
            using given culture info and plural rule generated by DefaultPluralRuleGenerator for given culture.
            </summary>
            <param name="cultureInfo">Culture info.</param>
        </member>
        <member name="M:NGettext.Catalog.#ctor(NGettext.Loaders.ILoader)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Catalog"/> class using the current UI culture info
            and loads data using given loader.
            </summary>
            <param name="loader">Loader instance.</param>
        </member>
        <member name="M:NGettext.Catalog.#ctor(NGettext.Loaders.ILoader,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Catalog"/> class using given culture info
            and loads data using given loader.
            </summary>
            <param name="loader">Loader instance.</param>
            <param name="cultureInfo">Culture info.</param>
        </member>
        <member name="M:NGettext.Catalog.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Catalog"/> class using the current UI culture info
            and loads data from specified stream using a new <see cref="T:NGettext.Loaders.MoLoader"/> instance.
            </summary>
            <param name="moStream">Stream that contain binary data in the MO file format.</param>
        </member>
        <member name="M:NGettext.Catalog.#ctor(System.IO.Stream,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Catalog"/> class using given culture info
            and loads data from specified stream using a new <see cref="T:NGettext.Loaders.MoLoader"/> instance.
            </summary>
            <param name="moStream">Stream that contain binary data in the MO file format.</param>
            <param name="cultureInfo">Culture info.</param>
        </member>
        <member name="M:NGettext.Catalog.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Catalog"/> class using the current UI culture info
            and loads data for specified domain and locale directory using a new <see cref="T:NGettext.Loaders.MoLoader"/> instance.
            </summary>
            <param name="domain">Catalog domain name.</param>
            <param name="localeDir">Directory that contains gettext localization files.</param>
        </member>
        <member name="M:NGettext.Catalog.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Catalog"/> class using given culture info
            and loads data for specified domain and locale directory using a new <see cref="T:NGettext.Loaders.MoLoader"/> instance.
            </summary>
            <param name="domain">Catalog domain name.</param>
            <param name="localeDir">Directory that contains gettext localization files.</param>
            <param name="cultureInfo">Culture info.</param>
        </member>
        <member name="M:NGettext.Catalog.Load(NGettext.Loaders.ILoader)">
            <summary>
            Loads data to the current catalog using specified loader instance.
            </summary>
            <param name="loader">Loader instance.</param>
        </member>
        <member name="M:NGettext.Catalog.GetString(System.String)">
            <summary>
            Returns <paramref name="text"/> translated into the selected language.
            Similar to <c>gettext</c> function.
            </summary>
            <param name="text">Text to translate.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.Catalog.GetString(System.String,System.Object[])">
            <summary>
            Returns <paramref name="text"/> translated into the selected language.
            Similar to <c>gettext</c> function.
            </summary>
            <param name="text">Text to translate.</param>
            <param name="args">Optional arguments for <see cref="M:System.String.Format(System.String,System.Object[])"/> method.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.Catalog.GetPluralString(System.String,System.String,System.Int64)">
            <summary>
            Returns the plural form for <paramref name="n"/> of the translation of <paramref name="text"/>.
            Similar to <c>ngettext</c> function.
            </summary>
            <param name="text">Singular form of message to translate.</param>
            <param name="pluralText">Plural form of message to translate.</param>
            <param name="n">Value that determines the plural form.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.Catalog.GetPluralString(System.String,System.String,System.Int64,System.Object[])">
            <summary>
            Returns the plural form for <paramref name="n"/> of the translation of <paramref name="text"/>.
            Similar to <c>ngettext</c> function.
            </summary>
            <param name="text">Singular form of message to translate.</param>
            <param name="pluralText">Plural form of message to translate.</param>
            <param name="n">Value that determines the plural form.</param>
            <param name="args">Optional arguments for <see cref="M:System.String.Format(System.String,System.Object[])"/> method.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.Catalog.GetParticularString(System.String,System.String)">
            <summary>
            Returns <paramref name="text"/> translated into the selected language using given <paramref name="context"/>.
            Similar to <c>pgettext</c> function.
            </summary>
            <param name="context">Context.</param>
            <param name="text">Text to translate.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.Catalog.GetParticularString(System.String,System.String,System.Object[])">
            <summary>
            Returns <paramref name="text"/> translated into the selected language using given <paramref name="context"/>.
            Similar to <c>pgettext</c> function.
            </summary>
            <param name="context">Context.</param>
            <param name="text">Text to translate.</param>
            <param name="args">Optional arguments for <see cref="M:System.String.Format(System.String,System.Object[])"/> method.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.Catalog.GetParticularPluralString(System.String,System.String,System.String,System.Int64)">
            <summary>
            Returns the plural form for <paramref name="n"/> of the translation of <paramref name="text"/> using given <paramref name="context"/>.
            Similar to <c>npgettext</c> function.
            </summary>
            <param name="context">Context.</param>
            <param name="text">Singular form of message to translate.</param>
            <param name="pluralText">Plural form of message to translate.</param>
            <param name="n">Value that determines the plural form.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.Catalog.GetParticularPluralString(System.String,System.String,System.String,System.Int64,System.Object[])">
            <summary>
            Returns the plural form for <paramref name="n"/> of the translation of <paramref name="text"/> using given <paramref name="context"/>.
            Similar to <c>npgettext</c> function.
            </summary>
            <param name="context">Context.</param>
            <param name="text">Singular form of message to translate.</param>
            <param name="pluralText">Plural form of message to translate.</param>
            <param name="n">Value that determines the plural form.</param>
            <param name="args">Optional arguments for <see cref="M:System.String.Format(System.String,System.Object[])"/> method.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.Catalog.GetStringDefault(System.String,System.String)">
            <summary>
            Returns translated string for given <paramref name="messageId"/> or <paramref name="defaultMessage"/> on fail.
            </summary>
            <param name="messageId">Message ID</param>
            <param name="defaultMessage">Default message</param>
            <returns>Translated string</returns>
        </member>
        <member name="M:NGettext.Catalog.GetPluralStringDefault(System.String,System.String,System.String,System.Int64)">
            <summary>
            Returns translated plural string for given <paramref name="messageId"/> or 
            <paramref name="defaultMessage"/> or <paramref name="defaultPluralMessage"/> on fail.
            </summary>
            <param name="messageId">Message ID</param>
            <param name="defaultMessage">Default message singular form</param>
            <param name="defaultPluralMessage">Default message plural form</param>
            <param name="n">Value that determines the plural form</param>
            <returns>Translated string</returns>
        </member>
        <member name="M:NGettext.Catalog.GetTranslations(System.String)">
            <summary>
            Returns all translations for given <paramref name="messageId"/>.
            </summary>
            <param name="messageId"></param>
            <returns>Returns all translations for given <paramref name="messageId"/> or null if not found.</returns>
        </member>
        <member name="T:NGettext.ICatalog">
            <summary>
            Represents a Gettext catalog instance.
            </summary>
        </member>
        <member name="M:NGettext.ICatalog.GetString(System.String)">
            <summary>
            Returns <paramref name="text"/> translated into the selected language.
            Similar to <c>gettext</c> function.
            </summary>
            <param name="text">Text to translate.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.ICatalog.GetString(System.String,System.Object[])">
            <summary>
            Returns <paramref name="text"/> translated into the selected language.
            Similar to <c>gettext</c> function.
            </summary>
            <param name="text">Text to translate.</param>
            <param name="args">Optional arguments for <see cref="M:System.String.Format(System.String,System.Object[])"/> method.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.ICatalog.GetPluralString(System.String,System.String,System.Int64)">
            <summary>
            Returns the plural form for <paramref name="n"/> of the translation of <paramref name="text"/>.
            Similar to <c>ngettext</c> function.
            </summary>
            <param name="text">Singular form of message to translate.</param>
            <param name="pluralText">Plural form of message to translate.</param>
            <param name="n">Value that determines the plural form.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.ICatalog.GetPluralString(System.String,System.String,System.Int64,System.Object[])">
            <summary>
            Returns the plural form for <paramref name="n"/> of the translation of <paramref name="text"/>.
            Similar to <c>ngettext</c> function.
            </summary>
            <param name="text">Singular form of message to translate.</param>
            <param name="pluralText">Plural form of message to translate.</param>
            <param name="n">Value that determines the plural form.</param>
            <param name="args">Optional arguments for <see cref="M:System.String.Format(System.String,System.Object[])"/> method.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.ICatalog.GetParticularString(System.String,System.String)">
            <summary>
            Returns <paramref name="text"/> translated into the selected language using given <paramref name="context"/>.
            Similar to <c>pgettext</c> function.
            </summary>
            <param name="context">Context.</param>
            <param name="text">Text to translate.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.ICatalog.GetParticularString(System.String,System.String,System.Object[])">
            <summary>
            Returns <paramref name="text"/> translated into the selected language using given <paramref name="context"/>.
            Similar to <c>pgettext</c> function.
            </summary>
            <param name="context">Context.</param>
            <param name="text">Text to translate.</param>
            <param name="args">Optional arguments for <see cref="M:System.String.Format(System.String,System.Object[])"/> method.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.ICatalog.GetParticularPluralString(System.String,System.String,System.String,System.Int64)">
            <summary>
            Returns the plural form for <paramref name="n"/> of the translation of <paramref name="text"/> using given <paramref name="context"/>.
            Similar to <c>npgettext</c> function.
            </summary>
            <param name="context">Context.</param>
            <param name="text">Singular form of message to translate.</param>
            <param name="pluralText">Plural form of message to translate.</param>
            <param name="n">Value that determines the plural form.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="M:NGettext.ICatalog.GetParticularPluralString(System.String,System.String,System.String,System.Int64,System.Object[])">
            <summary>
            Returns the plural form for <paramref name="n"/> of the translation of <paramref name="text"/> using given <paramref name="context"/>.
            Similar to <c>npgettext</c> function.
            </summary>
            <param name="context">Context.</param>
            <param name="text">Singular form of message to translate.</param>
            <param name="pluralText">Plural form of message to translate.</param>
            <param name="n">Value that determines the plural form.</param>
            <param name="args">Optional arguments for <see cref="M:System.String.Format(System.String,System.Object[])"/> method.</param>
            <returns>Translated text.</returns>
        </member>
        <member name="T:NGettext.Loaders.BigEndianBinaryReader">
            <summary>
            Reads primitive data types as binary values represented in big endian byte order.
            </summary>
        </member>
        <member name="M:NGettext.Loaders.BigEndianBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.BigEndianBinaryReader"/> class based on the 
            supplied stream and using System.Text.UTF8Encoding.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:NGettext.Loaders.BigEndianBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.BigEndianBinaryReader"/> class based on the
            supplied stream and a specific character encoding.
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:NGettext.Loaders.BigEndianBinaryReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current 
            stream and advances the current position of the stream by two bytes.
            </summary>
            <returns>
            A 2-byte signed integer read from the current stream.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.BigEndianBinaryReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current 
            stream using little-endian encoding and advances the position of the stream by two bytes.
            </summary>
            <returns>
            A 2-byte unsigned integer read from this stream.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.BigEndianBinaryReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current 
            stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>
            A 4-byte signed integer read from the current stream.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.BigEndianBinaryReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current 
            stream and advances the position of the stream by four bytes.
            </summary>
            <returns>
            A 4-byte unsigned integer read from this stream.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.BigEndianBinaryReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current 
            stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>
            An 8-byte signed integer read from the current stream.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.BigEndianBinaryReader.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current 
            stream and advances the position of the stream by eight bytes.
            </summary>
            <returns>
            An 8-byte unsigned integer read from this stream.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.BigEndianBinaryReader.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current 
            stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>
            A 4-byte floating point value read from the current stream.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.BigEndianBinaryReader.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current 
            stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>
            An 8-byte floating point value read from the current stream.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:NGettext.Loaders.ILoader">
            <summary>
            Represents an abstract loader that loads required data to the catalog.
            </summary>
        </member>
        <member name="M:NGettext.Loaders.ILoader.Load(NGettext.Catalog)">
            <summary>
            Loads translations to the specified catalog using catalog's culture info.
            </summary>
            <param name="catalog">A catalog instance to load translations to.</param>
        </member>
        <member name="T:NGettext.Loaders.MoAstPluralLoader">
            <summary>
            A catalog loader that loads data from files in the GNU/Gettext MO file format and generates
            a plural form rule using <see cref="T:NGettext.Plural.AstPluralRuleGenerator"/>.
            </summary>
        </member>
        <member name="M:NGettext.Loaders.MoAstPluralLoader.#ctor(System.String,System.String,NGettext.Loaders.MoFileParser)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoAstPluralLoader"/> class which will try to load a MO file
            that will be located in the localeDir using the domain name and catalog's culture info.
            <see cref="T:NGettext.Plural.AstPluralRuleGenerator"/> will be used to generate a plural form rule.
            </summary>
            <param name="domain"></param>
            <param name="localeDir"></param>
            <param name="parser"></param>
        </member>
        <member name="M:NGettext.Loaders.MoAstPluralLoader.#ctor(System.String,NGettext.Loaders.MoFileParser)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            from the specified path.
            <see cref="T:NGettext.Plural.AstPluralRuleGenerator"/> will be used to generate a plural form rule.
            </summary>
            <param name="filePath"></param>
            <param name="parser"></param>
        </member>
        <member name="M:NGettext.Loaders.MoAstPluralLoader.#ctor(System.IO.Stream,NGettext.Loaders.MoFileParser)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            from the specified stream.
            <see cref="T:NGettext.Plural.AstPluralRuleGenerator"/> will be used to generate a plural form rule.
            </summary>
            <param name="moStream"></param>
            <param name="parser"></param>
        </member>
        <member name="M:NGettext.Loaders.MoAstPluralLoader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            that will be located in the localeDir using the domain name and catalog's culture info.
            <see cref="T:NGettext.Plural.AstPluralRuleGenerator"/> will be used to generate a plural form rule.
            </summary>
            <param name="domain"></param>
            <param name="localeDir"></param>
        </member>
        <member name="M:NGettext.Loaders.MoAstPluralLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            from the specified path.
            <see cref="T:NGettext.Plural.AstPluralRuleGenerator"/> will be used to generate a plural form rule.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:NGettext.Loaders.MoAstPluralLoader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            from the specified stream.
            <see cref="T:NGettext.Plural.AstPluralRuleGenerator"/> will be used to generate a plural form rule.
            </summary>
            <param name="moStream"></param>
        </member>
        <member name="T:NGettext.Loaders.MoFile">
            <summary>
            Represents a parsed MO file data.
            </summary>
        </member>
        <member name="P:NGettext.Loaders.MoFile.FormatRevision">
            <summary>
            Gets parsed file's format revision.
            </summary>
        </member>
        <member name="P:NGettext.Loaders.MoFile.BigEndian">
            <summary>
            Gets a value that indicates whenever loaded file was in the BigEndian format.
            </summary>
        </member>
        <member name="P:NGettext.Loaders.MoFile.Encoding">
            <summary>
            Gets or sets file's encoding.
            </summary>
        </member>
        <member name="P:NGettext.Loaders.MoFile.Headers">
            <summary>
            Gets parsed file's meta data.
            </summary>
        </member>
        <member name="P:NGettext.Loaders.MoFile.Translations">
            <summary>
            Gets parsed file's translation strings.
            </summary>
        </member>
        <member name="M:NGettext.Loaders.MoFile.#ctor(System.Version,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoFile"/> class.
            </summary>
            <param name="formatRevision">File format revision.</param>
            <param name="encoding">File encoding.</param>
            <param name="bigEndian">File endianness.</param>
        </member>
        <member name="T:NGettext.Loaders.MoFileParser">
            <summary>
            MO file format parser.
            See http://www.gnu.org/software/gettext/manual/html_node/MO-Files.html
            </summary>
        </member>
        <member name="F:NGettext.Loaders.MoFileParser.MO_FILE_MAGIC">
            <summary>
            MO file format magic number.
            </summary>
        </member>
        <member name="P:NGettext.Loaders.MoFileParser.DefaultEncoding">
            <summary>
            Default encoding for decoding all strings in given MO file.
            Must be binary compatible with US-ASCII to be able to read file headers.
            </summary>
            <remarks>
            Default value is UTF-8 as it is compatible with required by specifications US-ASCII.
            </remarks>
        </member>
        <member name="P:NGettext.Loaders.MoFileParser.AutoDetectEncoding">
            <summary>
            Gets or sets a value that indicates whenever the parser can detect file encoding using the Content-Type MIME header.
            </summary>
        </member>
        <member name="M:NGettext.Loaders.MoFileParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoFileParser"/> class with UTF-8 as default encoding and with enabled automatic encoding detection.
            </summary>
        </member>
        <member name="M:NGettext.Loaders.MoFileParser.#ctor(System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoFileParser"/> class using given default encoding and given automatic encoding detection option.
            </summary>
        </member>
        <member name="M:NGettext.Loaders.MoFileParser.Parse(System.IO.Stream)">
            <summary>
            Parses a GNU MO file from the given stream and loads all available data.
            </summary>
            <remarks>
            http://www.gnu.org/software/gettext/manual/html_node/MO-Files.html
            </remarks>
            <param name="stream">Stream that contain binary data in the MO file format</param>
            <returns>Parsed file data.</returns>
        </member>
        <member name="T:NGettext.Loaders.MoLoader">
            <summary>
            A catalog loader that loads data from files in the GNU/Gettext MO file format.
            </summary>
        </member>
        <member name="P:NGettext.Loaders.MoLoader.PluralRuleGenerator">
            <summary>
            Gets a current plural generator instance.
            </summary>
        </member>
        <member name="P:NGettext.Loaders.MoLoader.Parser">
            <summary>
            Gets a MO file format parser instance.
            </summary>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.#ctor(System.String,System.String,NGettext.Plural.IPluralRuleGenerator,NGettext.Loaders.MoFileParser)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            that will be located in the localeDir using the domain name and catalog's culture info.
            </summary>
            <param name="domain"></param>
            <param name="localeDir"></param>
            <param name="pluralRuleGenerator"></param>
            <param name="parser"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.#ctor(System.String,NGettext.Plural.IPluralRuleGenerator,NGettext.Loaders.MoFileParser)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            from the specified path.
            </summary>
            <param name="filePath"></param>
            <param name="pluralRuleGenerator"></param>
            <param name="parser"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.#ctor(System.IO.Stream,NGettext.Plural.IPluralRuleGenerator,NGettext.Loaders.MoFileParser)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            from the specified stream.
            </summary>
            <param name="moStream"></param>
            <param name="pluralRuleGenerator"></param>
            <param name="parser"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.#ctor(System.String,System.String,NGettext.Plural.IPluralRuleGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            that will be located in the localeDir using the domain name and catalog's culture info.
            </summary>
            <param name="domain"></param>
            <param name="localeDir"></param>
            <param name="pluralRuleGenerator"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.#ctor(System.String,System.String,NGettext.Loaders.MoFileParser)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            that will be located in the localeDir using the domain name and catalog's culture info.
            </summary>
            <param name="domain"></param>
            <param name="localeDir"></param>
            <param name="parser"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            that will be located in the localeDir using the domain name and catalog's culture info.
            </summary>
            <param name="domain"></param>
            <param name="localeDir"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.#ctor(System.String,NGettext.Plural.IPluralRuleGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            from the specified path.
            </summary>
            <param name="filePath"></param>
            <param name="pluralRuleGenerator"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.#ctor(System.String,NGettext.Loaders.MoFileParser)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            from the specified path.
            </summary>
            <param name="filePath"></param>
            <param name="parser"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            from the specified path.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.#ctor(System.IO.Stream,NGettext.Plural.IPluralRuleGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            from the specified stream.
            </summary>
            <param name="moStream"></param>
            <param name="pluralRuleGenerator"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.#ctor(System.IO.Stream,NGettext.Loaders.MoFileParser)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            from the specified stream.
            </summary>
            <param name="moStream"></param>
            <param name="parser"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.MoLoader"/> class which will try to load a MO file
            from the specified stream.
            </summary>
            <param name="moStream"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.Load(NGettext.Catalog)">
            <summary>
            Loads translations to the specified catalog using catalog's culture info.
            </summary>
            <param name="catalog">A catalog instance to load translations to.</param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.Load(System.String,System.String,NGettext.Catalog)">
            <summary>
            Loads translations to the specified catalog using catalog's culture info from specified locale directory and specified domain.
            </summary>
            <param name="domain"></param>
            <param name="localeDir"></param>
            <param name="catalog"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.Load(System.String,NGettext.Catalog)">
            <summary>
            Loads translations to the specified catalog from specified MO file path.
            </summary>
            <param name="filePath"></param>
            <param name="catalog"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.Load(System.IO.Stream,NGettext.Catalog)">
            <summary>
            Loads translations to the specified catalog from specified MO file stream.
            </summary>
            <param name="moStream"></param>
            <param name="catalog"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.Load(NGettext.Loaders.MoFile,NGettext.Catalog)">
            <summary>
            Loads translations to the specified catalog using specified MO file parser.
            </summary>
            <param name="parsedMoFile"></param>
            <param name="catalog"></param>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.FindTranslationFile(System.Globalization.CultureInfo,System.String,System.String)">
            <summary>
            Finds corresponding translation file using specified culture info, domain and a locale directory.
            </summary>
            <param name="cultureInfo"></param>
            <param name="domain"></param>
            <param name="localeDir"></param>
            <returns></returns>
        </member>
        <member name="M:NGettext.Loaders.MoLoader.GetFileName(System.String,System.String,System.String)">
            <summary>
            Constructs a standard path to the MO translation file using specified path to the locale directory, 
            domain and locale's TwoLetterISOLanguageName string.
            </summary>
            <param name="localeDir"></param>
            <param name="domain"></param>
            <param name="locale"></param>
            <returns></returns>
        </member>
        <member name="T:NGettext.Loaders.ReadOnlyStreamWrapper">
            <summary>
            Stream wrapper that prevents closing and writing to underlying stream.
            </summary>
        </member>
        <member name="P:NGettext.Loaders.ReadOnlyStreamWrapper.BaseStream">
            <summary>
            Gets or sets the underlying stream.
            </summary>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Loaders.ReadOnlyStreamWrapper"/> class that wraps specified underlying stream.
            </summary>
            <param name="baseStream"></param>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. </param><param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. </param><param name="count">The maximum number of bytes to be read from the current stream. </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support reading. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param><param name="count">The number of bytes to be written to the current stream. </param><filterpriority>1</filterpriority>
        </member>
        <member name="P:NGettext.Loaders.ReadOnlyStreamWrapper.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:NGettext.Loaders.ReadOnlyStreamWrapper.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:NGettext.Loaders.ReadOnlyStreamWrapper.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:NGettext.Loaders.ReadOnlyStreamWrapper.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:NGettext.Loaders.ReadOnlyStreamWrapper.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.
            </returns>
            <param name="buffer">The buffer to read the data into. </param><param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param><param name="count">The maximum number of bytes to read. </param><param name="callback">An optional asynchronous callback, to be called when the read is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <returns>
            An IAsyncResult that represents the asynchronous write, which could still be pending.
            </returns>
            <param name="buffer">The buffer to write data from. </param><param name="offset">The byte offset in <paramref name="buffer"/> from which to begin writing. </param><param name="count">The maximum number of bytes to write. </param><param name="callback">An optional asynchronous callback, to be called when the write is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous write past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the write operation. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete.
            </summary>
            <returns>
            The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
            </returns>
            <param name="asyncResult">The reference to the pending asynchronous request to finish. </param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream. </exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream. </exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an Int32, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:NGettext.Loaders.ReadOnlyStreamWrapper.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the System.IO.Stream and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources</param>
        </member>
        <member name="T:NGettext.Plural.AstPluralRule">
            <summary>
            Represents a plural rule that will evaluate a given number 
            using an abstract syntax tree generated by a plural rule formula parser.
            </summary>
        </member>
        <member name="P:NGettext.Plural.AstPluralRule.NumPlurals">
            <summary>
            Maximum number of plural forms supported.
            </summary>
        </member>
        <member name="M:NGettext.Plural.AstPluralRule.#ctor(System.Int32,NGettext.Plural.Ast.Token)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Plural.Ast.Token"/> class with given NumPlurals and abstract syntax tree.
            </summary>
            <param name="numPlurals"></param>
            <param name="astRoot">Abstract syntax tree root.</param>
        </member>
        <member name="M:NGettext.Plural.AstPluralRule.Evaluate(System.Int64)">
            <summary>
            Evaluates a number and returns a plural form index.
            </summary>
            <param name="number">Number which needs to be evaluated.</param>
            <returns>Plural form index.</returns>
        </member>
        <member name="T:NGettext.Plural.AstPluralRuleGenerator">
            <summary>
            Plural rule generator that can parse a string that contains a plural rule and generate an AstPluralRule from it.
            </summary>
        </member>
        <member name="P:NGettext.Plural.AstPluralRuleGenerator.PluralRuleText">
            <summary>
            Gets a plural rule text.
            </summary>
        </member>
        <member name="P:NGettext.Plural.AstPluralRuleGenerator.Parser">
            <summary>
            An instance of the <see cref="T:NGettext.Plural.Ast.AstTokenParser"/> class that will be used to parse a plural rule string into an abstract syntax tree.
            </summary>
        </member>
        <member name="M:NGettext.Plural.AstPluralRuleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Plural.AstPluralRuleGenerator"/> class with no plural rule text using default AstTokenParser.
            </summary>
        </member>
        <member name="M:NGettext.Plural.AstPluralRuleGenerator.#ctor(NGettext.Plural.Ast.AstTokenParser)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Plural.AstPluralRuleGenerator"/> class with no plural rule text using given AstTokenParser.
            </summary>
        </member>
        <member name="M:NGettext.Plural.AstPluralRuleGenerator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Plural.AstPluralRuleGenerator"/> class using default AstTokenParser and sets a plural rule text.
            </summary>
            <param name="pluralRuleText"></param>
        </member>
        <member name="M:NGettext.Plural.AstPluralRuleGenerator.#ctor(System.String,NGettext.Plural.Ast.AstTokenParser)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Plural.AstPluralRuleGenerator"/> class using given AstTokenParser and sets a plural rule text.
            </summary>
            <param name="pluralRuleText"></param>
            <param name="parser"></param>
        </member>
        <member name="M:NGettext.Plural.AstPluralRuleGenerator.SetPluralRuleText(System.String)">
            <summary>
            Sets a plural rule text representation that needs to be parsed.
            </summary>
            <param name="pluralRuleText">Plural rule text representation.</param>
        </member>
        <member name="M:NGettext.Plural.AstPluralRuleGenerator.CreateRule(System.Globalization.CultureInfo)">
            <summary>
            Creates a plural rule for given culture.
            </summary>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:NGettext.Plural.AstPluralRuleGenerator.ParseNumPlurals(System.String)">
            <summary>
            Parses value of the 'nplurals' parameter from the plural rule text.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:NGettext.Plural.AstPluralRuleGenerator.ParsePluralFormulaText(System.String)">
            <summary>
            Parses value of the 'plural' parameter from the plural rule text.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:NGettext.Plural.Ast.AstTokenParser">
            <summary>
            Plural rule formula parser.
            Ported from the I18n component from Zend Framework (https://github.com/zendframework/zf2).
            </summary>
        </member>
        <member name="M:NGettext.Plural.Ast.AstTokenParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Plural.Ast.AstTokenParser"/> class with default token definitions.
            </summary>
        </member>
        <member name="M:NGettext.Plural.Ast.AstTokenParser.Parse(System.String)">
            <summary>
            Parses the input string that contains a plural rule formula and generates an abstract syntax tree.
            </summary>
            <param name="input">Input string.</param>
            <returns>Root node of the abstract syntax tree.</returns>
        </member>
        <member name="T:NGettext.Plural.Ast.Token">
            <summary>
            Represents a node in the abstract syntax tree.
            </summary>
        </member>
        <member name="P:NGettext.Plural.Ast.Token.Type">
            <summary>
            Gets the type of the current token.
            </summary>
        </member>
        <member name="P:NGettext.Plural.Ast.Token.Value">
            <summary>
            Gets or sets an optional value associated with this token.
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.Token.Children">
            <summary>
            Gets token children.
            </summary>
        </member>
        <member name="M:NGettext.Plural.Ast.Token.#ctor(NGettext.Plural.Ast.TokenType,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Plural.Ast.Token"/> class with given type and (optional) value.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="T:NGettext.Plural.Ast.TokenDefinition">
            <summary>
            A token definition that describes behavior of token with specified type.
            </summary>
        </member>
        <member name="P:NGettext.Plural.Ast.TokenDefinition.TokenType">
            <summary>
            Gets type of the token this definition associated with.
            </summary>
        </member>
        <member name="P:NGettext.Plural.Ast.TokenDefinition.LeftBindingPower">
            <summary>
            Gets or sets a left binding power.
            </summary>
        </member>
        <member name="M:NGettext.Plural.Ast.TokenDefinition.#ctor(NGettext.Plural.Ast.TokenType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Plural.Ast.TokenDefinition"/> class for given token type with given left binding power.
            </summary>
            <param name="tokenType"></param>
            <param name="leftBindingPower"></param>
        </member>
        <member name="M:NGettext.Plural.Ast.TokenDefinition.SetNullDenotationGetter(NGettext.Plural.Ast.TokenDefinition.NullDenotationGetterDelegate)">
            <summary>
            Sets a null denotation getter.
            </summary>
            <param name="nullDenotationGetter"></param>
            <returns></returns>
        </member>
        <member name="M:NGettext.Plural.Ast.TokenDefinition.SetLeftDenotationGetter(NGettext.Plural.Ast.TokenDefinition.LeftDenotationGetterDelegate)">
            <summary>
            Sets a left denotation getter.
            </summary>
            <param name="leftDenotationGetter"></param>
            <returns></returns>
        </member>
        <member name="M:NGettext.Plural.Ast.TokenDefinition.GetNullDenotation(NGettext.Plural.Ast.Token)">
            <summary>
            Gets a null denotation token for given token using the null denotation getter.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:NGettext.Plural.Ast.TokenDefinition.GetLeftDenotation(NGettext.Plural.Ast.Token,NGettext.Plural.Ast.Token)">
            <summary>
            Gets a left denotation token for given token using the left denotation getter.
            </summary>
            <param name="self"></param>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.TernaryIf">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.TernaryElse">
            <summary>
            :
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.Or">
            <summary>
            ||
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.And">
            <summary>
            &amp;&amp;
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.Equals">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.NotEquals">
            <summary>
            !=
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.GreaterThan">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.LessThan">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.GreaterOrEquals">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.LessOrEquals">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.Minus">
            <summary>
            -
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.Plus">
            <summary>
            +
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.Multiply">
            <summary>
            *
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.Divide">
            <summary>
            /
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.Modulo">
            <summary>
            %
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.Not">
            <summary>
            !
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.N">
            <summary>
            n
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.LeftParenthesis">
            <summary>
            (
            </summary>
        </member>
        <member name="F:NGettext.Plural.Ast.TokenType.RightParenthesis">
            <summary>
            )
            </summary>
        </member>
        <member name="T:NGettext.Plural.DefaultPluralRuleGenerator">
            <summary>
            Default plural rule generator.
            </summary>
        </member>
        <member name="M:NGettext.Plural.DefaultPluralRuleGenerator.CreateRule(System.Globalization.CultureInfo)">
            <summary>
            Creates a plural rule for given culture.
            </summary>
            <remarks>
            Default furmulas created using information from http://cldr.unicode.org/
            </remarks>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="T:NGettext.Plural.IPluralRule">
            <summary>
            Represents a plural form rule which can generate a plural form index by given number.
            </summary>
        </member>
        <member name="P:NGettext.Plural.IPluralRule.NumPlurals">
            <summary>
            Maximum number of plural forms supported.
            </summary>
        </member>
        <member name="M:NGettext.Plural.IPluralRule.Evaluate(System.Int64)">
            <summary>
            Evaluates a number and returns a plural form index.
            </summary>
            <param name="number">Number which needs to be evaluated.</param>
            <returns>Plural form index.</returns>
        </member>
        <member name="T:NGettext.Plural.IPluralRuleGenerator">
            <summary>
            Plural rule generator.
            </summary>
        </member>
        <member name="M:NGettext.Plural.IPluralRuleGenerator.CreateRule(System.Globalization.CultureInfo)">
            <summary>
            Creates a plural rule for given culture.
            </summary>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="T:NGettext.Plural.IPluralRuleTextParser">
            <summary>
            Represents a plural rule generator that can generate plural rules based on parsed text.
            </summary>
        </member>
        <member name="M:NGettext.Plural.IPluralRuleTextParser.SetPluralRuleText(System.String)">
            <summary>
            Sets a plural rule text representation that needs to be parsed.
            </summary>
            <param name="pluralRuleText">Plural rule text representation.</param>
        </member>
        <member name="T:NGettext.Plural.PluralRule">
            <summary>
            Default plural rule implementation which uses a evaluation delegate instance to evaluate a plural form.
            </summary>
        </member>
        <member name="F:NGettext.Plural.PluralRule.EvaluatorDelegate">
            <summary>
            Evaluation delegate instance.
            </summary>
        </member>
        <member name="F:NGettext.Plural.PluralRule.Default">
            <summary>
            Default plural rule instance.
            </summary>
        </member>
        <member name="P:NGettext.Plural.PluralRule.NumPlurals">
            <summary>
            Maximum number of plural forms supported.
            </summary>
        </member>
        <member name="M:NGettext.Plural.PluralRule.#ctor(System.Int32,NGettext.Plural.PluralRuleEvaluatorDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:NGettext.Plural.PluralRule"/> class using specified maximum plural
            forms value and an evaluation delegate.
            </summary>
            <param name="numPlurals"></param>
            <param name="evaluatorDelegate"></param>
        </member>
        <member name="M:NGettext.Plural.PluralRule.Evaluate(System.Int64)">
            <summary>
            Evaluates a number and returns a plural form index.
            </summary>
            <param name="number">Number which needs to be evaluated.</param>
            <returns>Plural form index.</returns>
        </member>
        <member name="T:NGettext.Plural.PluralRuleEvaluatorDelegate">
            <summary>
            Represents a plural rule evaluation delegate used in the DefaultPluralRule.
            </summary>
            <param name="number">Number whitch needs to be evaluated.</param>
            <returns>Plural form index.</returns>
        </member>
    </members>
</doc>
